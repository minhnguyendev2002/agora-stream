{"ast":null,"code":"import { useEffect, useMemo } from 'react';\nimport { useGlobalState, useGlobalMutation } from '../utils/container';\nimport RTCClient from '../rtc-client';\nexport default function useDevices() {\n  const stateCtx = useGlobalState();\n  const mutationCtx = useGlobalMutation();\n  const client = useMemo(() => {\n    const _rtcClient = new RTCClient();\n    return _rtcClient;\n  }, []);\n  const [cameraList, microphoneList] = useMemo(() => {\n    return [stateCtx.devicesList.filter(item => item.kind === 'videoinput').map((item, idx) => ({\n      value: item.deviceId,\n      label: item.label ? item.label : `Video Input ${idx}`\n    })), stateCtx.devicesList.filter(item => item.kind === 'audioinput').map((item, idx) => ({\n      value: item.deviceId,\n      label: item.label ? item.label : `Audio Input ${idx}`\n    }))];\n  }, [stateCtx.devicesList]);\n  useEffect(() => {\n    if (cameraList.length > 0 || microphoneList.length > 0) return;\n    client.getDevices().then(datas => {\n      mutationCtx.setDevicesList(datas);\n    });\n    return () => {\n      client.destroy();\n    };\n  }, [microphoneList, mutationCtx, cameraList, client]);\n  useEffect(() => {\n    if (cameraList[0] && microphoneList[0] && (!stateCtx.config.cameraId || !stateCtx.config.microphoneId)) {\n      mutationCtx.updateConfig({\n        cameraId: cameraList[0].value,\n        microphoneId: microphoneList[0].value\n      });\n      mutationCtx.stopLoading();\n    }\n  }, [mutationCtx, stateCtx.devicesList, stateCtx.config, cameraList, microphoneList]);\n  return [cameraList, microphoneList];\n}","map":{"version":3,"names":["useEffect","useMemo","useGlobalState","useGlobalMutation","RTCClient","useDevices","stateCtx","mutationCtx","client","_rtcClient","cameraList","microphoneList","devicesList","filter","item","kind","map","idx","value","deviceId","label","length","getDevices","then","datas","setDevicesList","destroy","config","cameraId","microphoneId","updateConfig","stopLoading"],"sources":["D:/Project/Freelance/Wm-Bank/API-Examples-Web/react/open-live/src/utils/use-devices.jsx"],"sourcesContent":["import {useEffect, useMemo} from 'react'\nimport {useGlobalState, useGlobalMutation} from '../utils/container'\nimport RTCClient from '../rtc-client'\n\nexport default function useDevices() {\n    const stateCtx = useGlobalState()\n    const mutationCtx = useGlobalMutation()\n\n    const client = useMemo(() => {\n        const _rtcClient = new RTCClient()\n        return _rtcClient\n    }, [])\n\n    const [cameraList, microphoneList] = useMemo(() => {\n        return [\n            stateCtx.devicesList\n                .filter((item) => item.kind === 'videoinput')\n                .map((item, idx) => ({\n                    value: item.deviceId,\n                    label: item.label ? item.label : `Video Input ${idx}`\n                })),\n            stateCtx.devicesList\n                .filter((item) => item.kind === 'audioinput')\n                .map((item, idx) => ({\n                    value: item.deviceId,\n                    label: item.label ? item.label : `Audio Input ${idx}`\n                }))\n        ]\n    }, [stateCtx.devicesList])\n\n    useEffect(() => {\n        if (cameraList.length > 0 || microphoneList.length > 0) return\n\n        client.getDevices().then((datas) => {\n            mutationCtx.setDevicesList(datas)\n        })\n        return () => {\n            client.destroy()\n        }\n    }, [microphoneList, mutationCtx, cameraList, client])\n\n    useEffect(() => {\n        if (\n            cameraList[0] &&\n            microphoneList[0] &&\n            (!stateCtx.config.cameraId || !stateCtx.config.microphoneId)\n        ) {\n            mutationCtx.updateConfig({\n                cameraId: cameraList[0].value,\n                microphoneId: microphoneList[0].value\n            })\n            mutationCtx.stopLoading()\n        }\n    }, [\n        mutationCtx,\n        stateCtx.devicesList,\n        stateCtx.config,\n        cameraList,\n        microphoneList\n    ])\n\n    return [cameraList, microphoneList]\n}\n"],"mappings":"AAAA,SAAQA,SAAS,EAAEC,OAAO,QAAO,OAAO;AACxC,SAAQC,cAAc,EAAEC,iBAAiB,QAAO,oBAAoB;AACpE,OAAOC,SAAS,MAAM,eAAe;AAErC,eAAe,SAASC,UAAUA,CAAA,EAAG;EACjC,MAAMC,QAAQ,GAAGJ,cAAc,EAAE;EACjC,MAAMK,WAAW,GAAGJ,iBAAiB,EAAE;EAEvC,MAAMK,MAAM,GAAGP,OAAO,CAAC,MAAM;IACzB,MAAMQ,UAAU,GAAG,IAAIL,SAAS,EAAE;IAClC,OAAOK,UAAU;EACrB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAM,CAACC,UAAU,EAAEC,cAAc,CAAC,GAAGV,OAAO,CAAC,MAAM;IAC/C,OAAO,CACHK,QAAQ,CAACM,WAAW,CACfC,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACC,IAAI,KAAK,YAAY,CAAC,CAC5CC,GAAG,CAAC,CAACF,IAAI,EAAEG,GAAG,MAAM;MACjBC,KAAK,EAAEJ,IAAI,CAACK,QAAQ;MACpBC,KAAK,EAAEN,IAAI,CAACM,KAAK,GAAGN,IAAI,CAACM,KAAK,GAAI,eAAcH,GAAI;IACxD,CAAC,CAAC,CAAC,EACPX,QAAQ,CAACM,WAAW,CACfC,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACC,IAAI,KAAK,YAAY,CAAC,CAC5CC,GAAG,CAAC,CAACF,IAAI,EAAEG,GAAG,MAAM;MACjBC,KAAK,EAAEJ,IAAI,CAACK,QAAQ;MACpBC,KAAK,EAAEN,IAAI,CAACM,KAAK,GAAGN,IAAI,CAACM,KAAK,GAAI,eAAcH,GAAI;IACxD,CAAC,CAAC,CAAC,CACV;EACL,CAAC,EAAE,CAACX,QAAQ,CAACM,WAAW,CAAC,CAAC;EAE1BZ,SAAS,CAAC,MAAM;IACZ,IAAIU,UAAU,CAACW,MAAM,GAAG,CAAC,IAAIV,cAAc,CAACU,MAAM,GAAG,CAAC,EAAE;IAExDb,MAAM,CAACc,UAAU,EAAE,CAACC,IAAI,CAAEC,KAAK,IAAK;MAChCjB,WAAW,CAACkB,cAAc,CAACD,KAAK,CAAC;IACrC,CAAC,CAAC;IACF,OAAO,MAAM;MACThB,MAAM,CAACkB,OAAO,EAAE;IACpB,CAAC;EACL,CAAC,EAAE,CAACf,cAAc,EAAEJ,WAAW,EAAEG,UAAU,EAAEF,MAAM,CAAC,CAAC;EAErDR,SAAS,CAAC,MAAM;IACZ,IACIU,UAAU,CAAC,CAAC,CAAC,IACbC,cAAc,CAAC,CAAC,CAAC,KAChB,CAACL,QAAQ,CAACqB,MAAM,CAACC,QAAQ,IAAI,CAACtB,QAAQ,CAACqB,MAAM,CAACE,YAAY,CAAC,EAC9D;MACEtB,WAAW,CAACuB,YAAY,CAAC;QACrBF,QAAQ,EAAElB,UAAU,CAAC,CAAC,CAAC,CAACQ,KAAK;QAC7BW,YAAY,EAAElB,cAAc,CAAC,CAAC,CAAC,CAACO;MACpC,CAAC,CAAC;MACFX,WAAW,CAACwB,WAAW,EAAE;IAC7B;EACJ,CAAC,EAAE,CACCxB,WAAW,EACXD,QAAQ,CAACM,WAAW,EACpBN,QAAQ,CAACqB,MAAM,EACfjB,UAAU,EACVC,cAAc,CACjB,CAAC;EAEF,OAAO,CAACD,UAAU,EAAEC,cAAc,CAAC;AACvC"},"metadata":{},"sourceType":"module"}