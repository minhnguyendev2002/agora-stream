{"ast":null,"code":"import AgoraRTC from 'agora-rtc-sdk-ng';\nimport EventEmitter from 'events';\nconst appID = process.env.REACT_APP_AGORA_APP_ID;\nconsole.log('agora sdk version: ' + AgoraRTC.VERSION + ' compatible: ' + AgoraRTC.checkSystemRequirements());\nexport default class RTCClient {\n  constructor() {\n    this._client = null;\n    this._joined = false;\n    this._leave = false;\n    this.mLocalAudioTrack = null;\n    this.mLocalVideoTrack = null;\n    this._uid = 0;\n    this._eventBus = new EventEmitter();\n    this._created = false;\n  }\n  createClient(data) {\n    if (this._client != null) {\n      return this._client;\n    }\n    const config = {\n      mode: (data === null || data === void 0 ? void 0 : data.mode) ? data.mode : 'live',\n      codec: (data === null || data === void 0 ? void 0 : data.codec) ? data.codec : 'vp8'\n    };\n    console.debug('createClient() mode: ' + config.mode + ' codec: ' + config.codec);\n    this._client = AgoraRTC.createClient(config);\n    this._created = true;\n    return this._client;\n  }\n  destroy() {\n    console.debug('destroy()');\n    this._created = false;\n    this._client = null;\n  }\n  on(evt, callback) {\n    this._client.on(evt, callback);\n  }\n  setClientRole(role) {\n    console.debug('setClientRole() role: ' + role);\n    this._client.setClientRole(role);\n  }\n  startLive(microphoneId, cameraId) {\n    return new Promise((resolve, reject) => {\n      console.debug('startLive()');\n      AgoraRTC.createMicrophoneAndCameraTracks({\n        microphoneId: microphoneId\n      }, {\n        cameraId: cameraId\n      }).then(tracks => {\n        this.mLocalAudioTrack = tracks[0];\n        this.mLocalVideoTrack = tracks[1];\n        this._client.publish([this.mLocalAudioTrack, this.mLocalVideoTrack]);\n        resolve();\n      }).catch(e => {\n        reject(e);\n      });\n    });\n  }\n  stopLive() {\n    console.debug('stopLive()');\n    if (this.mLocalAudioTrack) {\n      this._client.unpublish(this.mLocalAudioTrack);\n      this.mLocalAudioTrack.stop();\n      this.mLocalAudioTrack.close();\n      this.mLocalAudioTrack = null;\n    }\n    if (this.mLocalVideoTrack) {\n      this._client.unpublish(this.mLocalVideoTrack);\n      this.mLocalVideoTrack.stop();\n      this.mLocalVideoTrack.close();\n      this.mLocalVideoTrack = null;\n    }\n  }\n  async startShareScrren() {\n    [this.mLocalAudioTrack, this.mLocalVideoTrack] = await Promise.all([AgoraRTC.createMicrophoneAudioTrack(), AgoraRTC.createScreenVideoTrack()]);\n    if (this.mLocalAudioTrack) {\n      this._client.publish(this.mLocalAudioTrack);\n    }\n    if (this.mLocalVideoTrack) {\n      this._client.publish(this.mLocalVideoTrack);\n    }\n  }\n  stopShareScrren() {\n    console.debug('stopShareScrren()');\n    if (this.mLocalAudioTrack) {\n      this._client.unpublish(this.mLocalAudioTrack);\n      this.mLocalAudioTrack.stop();\n      this.mLocalAudioTrack.close();\n      this.mLocalAudioTrack = null;\n    }\n    if (this.mLocalVideoTrack) {\n      this._client.unpublish(this.mLocalVideoTrack);\n      this.mLocalVideoTrack.stop();\n      this.mLocalVideoTrack.close();\n      this.mLocalVideoTrack = null;\n    }\n  }\n  subscribe(user, mediaType) {\n    return new Promise((resolve, reject) => {\n      this._client.subscribe(user, mediaType).then(mRemoteTrack => {\n        console.debug(`subscribe success user=${user.uid}, mediaType=${mediaType}`);\n        resolve(mRemoteTrack);\n      }).catch(e => {\n        console.debug(`subscribe error user=${user.uid}, mediaType=${mediaType}`);\n      });\n    });\n  }\n  getDevices() {\n    return new Promise((resolve, reject) => {\n      if (!this._client) {\n        this.createClient();\n      }\n      console.debug('getDevices()');\n      if (this.mLocalAudioTrack) {\n        this.mLocalAudioTrack.stop();\n        this.mLocalAudioTrack.close();\n        this.mLocalAudioTrack = null;\n      }\n      if (this.mLocalVideoTrack) {\n        this.mLocalVideoTrack.stop();\n        this.mLocalVideoTrack.close();\n        this.mLocalVideoTrack = null;\n      }\n      AgoraRTC.createMicrophoneAndCameraTracks().then(tracks => {\n        this.mLocalAudioTrack = tracks[0];\n        this.mLocalVideoTrack = tracks[1];\n        AgoraRTC.getDevices().then(it => {\n          resolve(it);\n          if (this.mLocalAudioTrack) {\n            this.mLocalAudioTrack.stop();\n            this.mLocalAudioTrack.close();\n            this.mLocalAudioTrack = null;\n          }\n          if (this.mLocalVideoTrack) {\n            this.mLocalVideoTrack.stop();\n            this.mLocalVideoTrack.close();\n            this.mLocalVideoTrack = null;\n          }\n        });\n      }).catch(e => {\n        reject(e);\n      });\n    });\n  }\n  join(channel, token) {\n    return new Promise((resolve, reject) => {\n      if (this._joined == true) {\n        resolve(this._uid);\n        return;\n      }\n      this._joined = true;\n      this._leave = false;\n      this._uid = 0;\n      console.debug('join appID: ' + appID + ',channel: ' + channel);\n      this._client.join(appID, channel, token || null).then(uid => {\n        console.debug('join success, channel: ' + channel + ', uid: ' + uid);\n        this._uid = uid;\n        this._joined = true;\n        resolve(uid);\n      }).catch(e => {\n        this._joined = false;\n        reject(e);\n        console.error('join error: ' + e);\n      });\n    });\n  }\n  leave() {\n    return new Promise(resolve => {\n      if (this._leave == true) {\n        resolve();\n        return;\n      }\n      console.debug('leave()');\n      this._leave = true;\n      if (!this._client) return resolve();\n      this._client.leave().then(() => {\n        console.debug('leave() success');\n        this._joined = false;\n        this._uid = null;\n        resolve();\n      }).catch(e => {\n        console.error('leave failed: ' + e);\n      });\n    });\n  }\n}","map":{"version":3,"names":["AgoraRTC","EventEmitter","appID","process","env","REACT_APP_AGORA_APP_ID","console","log","VERSION","checkSystemRequirements","RTCClient","constructor","_client","_joined","_leave","mLocalAudioTrack","mLocalVideoTrack","_uid","_eventBus","_created","createClient","data","config","mode","codec","debug","destroy","on","evt","callback","setClientRole","role","startLive","microphoneId","cameraId","Promise","resolve","reject","createMicrophoneAndCameraTracks","then","tracks","publish","catch","e","stopLive","unpublish","stop","close","startShareScrren","all","createMicrophoneAudioTrack","createScreenVideoTrack","stopShareScrren","subscribe","user","mediaType","mRemoteTrack","uid","getDevices","it","join","channel","token","error","leave"],"sources":["D:/Project/Freelance/Wm-Bank/API-Examples-Web/react/open-live/src/rtc-client.js"],"sourcesContent":["import AgoraRTC from 'agora-rtc-sdk-ng'\nimport EventEmitter from 'events'\n\nconst appID = process.env.REACT_APP_AGORA_APP_ID\nconsole.log(\n    'agora sdk version: ' +\n    AgoraRTC.VERSION +\n    ' compatible: ' +\n    AgoraRTC.checkSystemRequirements()\n)\nexport default class RTCClient {\n    constructor() {\n        this._client = null\n        this._joined = false\n        this._leave = false\n        this.mLocalAudioTrack = null\n        this.mLocalVideoTrack = null\n        this._uid = 0\n        this._eventBus = new EventEmitter()\n        this._created = false\n    }\n\n    createClient(data) {\n        if (this._client != null) {\n            return this._client\n        }\n\n        const config = {\n            mode: data?.mode ? data.mode : 'live',\n            codec: data?.codec ? data.codec : 'vp8'\n        }\n        console.debug('createClient() mode: ' + config.mode + ' codec: ' + config.codec)\n        this._client = AgoraRTC.createClient(config)\n        this._created = true\n        return this._client\n    }\n\n    destroy() {\n        console.debug('destroy()')\n        this._created = false\n        this._client = null\n    }\n\n    on(evt, callback) {\n        this._client.on(evt, callback)\n    }\n\n    setClientRole(role) {\n        console.debug('setClientRole() role: ' + role)\n        this._client.setClientRole(role)\n    }\n\n    startLive(microphoneId, cameraId) {\n        return new Promise((resolve, reject) => {\n            console.debug('startLive()')\n\n            AgoraRTC.createMicrophoneAndCameraTracks({microphoneId: microphoneId}, {cameraId: cameraId})\n                .then((tracks) => {\n                    this.mLocalAudioTrack = tracks[0]\n                    this.mLocalVideoTrack = tracks[1]\n                    this._client.publish([this.mLocalAudioTrack, this.mLocalVideoTrack])\n\n                    resolve()\n                })\n                .catch(e => {\n                    reject(e)\n                })\n        })\n    }\n\n    stopLive() {\n        console.debug('stopLive()')\n\n        if (this.mLocalAudioTrack) {\n            this._client.unpublish(this.mLocalAudioTrack)\n\n            this.mLocalAudioTrack.stop()\n            this.mLocalAudioTrack.close()\n            this.mLocalAudioTrack = null\n        }\n\n        if (this.mLocalVideoTrack) {\n            this._client.unpublish(this.mLocalVideoTrack)\n\n            this.mLocalVideoTrack.stop()\n            this.mLocalVideoTrack.close()\n            this.mLocalVideoTrack = null\n        }\n    }\n\n    async startShareScrren() {\n        [this.mLocalAudioTrack, this.mLocalVideoTrack] = await Promise.all([\n            AgoraRTC.createMicrophoneAudioTrack(),\n            AgoraRTC.createScreenVideoTrack()\n        ])\n\n        if (this.mLocalAudioTrack) {\n            this._client.publish(this.mLocalAudioTrack)\n        }\n\n        if (this.mLocalVideoTrack) {\n            this._client.publish(this.mLocalVideoTrack)\n        }\n    }\n\n    stopShareScrren() {\n        console.debug('stopShareScrren()')\n\n        if (this.mLocalAudioTrack) {\n            this._client.unpublish(this.mLocalAudioTrack)\n\n            this.mLocalAudioTrack.stop()\n            this.mLocalAudioTrack.close()\n            this.mLocalAudioTrack = null\n        }\n\n        if (this.mLocalVideoTrack) {\n            this._client.unpublish(this.mLocalVideoTrack)\n\n            this.mLocalVideoTrack.stop()\n            this.mLocalVideoTrack.close()\n            this.mLocalVideoTrack = null\n        }\n    }\n\n    subscribe(user, mediaType) {\n        return new Promise((resolve, reject) => {\n            this._client.subscribe(user, mediaType)\n                .then(mRemoteTrack => {\n                    console.debug(`subscribe success user=${user.uid}, mediaType=${mediaType}`)\n                    resolve(mRemoteTrack)\n                })\n                .catch(e => {\n                    console.debug(`subscribe error user=${user.uid}, mediaType=${mediaType}`)\n                })\n        })\n    }\n\n    getDevices() {\n        return new Promise((resolve, reject) => {\n            if (!this._client) {\n                this.createClient()\n            }\n\n            console.debug('getDevices()')\n\n            if (this.mLocalAudioTrack) {\n                this.mLocalAudioTrack.stop()\n                this.mLocalAudioTrack.close()\n                this.mLocalAudioTrack = null\n            }\n\n            if (this.mLocalVideoTrack) {\n                this.mLocalVideoTrack.stop()\n                this.mLocalVideoTrack.close()\n                this.mLocalVideoTrack = null\n            }\n\n            AgoraRTC.createMicrophoneAndCameraTracks()\n                .then((tracks) => {\n                    this.mLocalAudioTrack = tracks[0]\n                    this.mLocalVideoTrack = tracks[1]\n\n                    AgoraRTC.getDevices().then(it => {\n                        resolve(it)\n\n                        if (this.mLocalAudioTrack) {\n                            this.mLocalAudioTrack.stop()\n                            this.mLocalAudioTrack.close()\n                            this.mLocalAudioTrack = null\n                        }\n\n                        if (this.mLocalVideoTrack) {\n                            this.mLocalVideoTrack.stop()\n                            this.mLocalVideoTrack.close()\n                            this.mLocalVideoTrack = null\n                        }\n                    })\n                })\n                .catch(e => {\n                    reject(e)\n                })\n        })\n    }\n\n    join(channel, token) {\n        return new Promise((resolve, reject) => {\n            if (this._joined == true) {\n                resolve(this._uid)\n                return\n            }\n\n            this._joined = true\n            this._leave = false\n            this._uid = 0\n            console.debug('join appID: ' + appID + ',channel: ' + channel)\n\n            this._client.join(appID, channel, token || null).then(uid => {\n                console.debug(\n                    'join success, channel: ' + channel + ', uid: ' + uid\n                )\n\n                this._uid = uid\n                this._joined = true\n\n                resolve(uid)\n            })\n                .catch(e => {\n                    this._joined = false\n                    reject(e)\n                    console.error('join error: ' + e)\n                })\n        })\n    }\n\n    leave() {\n        return new Promise((resolve) => {\n            if (this._leave == true) {\n                resolve()\n                return\n            }\n\n            console.debug('leave()')\n            this._leave = true\n            if (!this._client) return resolve()\n\n            this._client.leave()\n                .then(() => {\n                    console.debug('leave() success')\n                    this._joined = false\n                    this._uid = null\n                    resolve()\n                })\n                .catch((e) => {\n                    console.error('leave failed: ' + e)\n                })\n        })\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}